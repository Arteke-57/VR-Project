/* Cormon VR Experience - Virtual Reality on the Modern Web
    Copyright (C) 2023-2024  Yanis M., Matthieu Farcot

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>. */

// 0.19 X   |   0.22 Y
AFRAME.registerComponent('security', {
    init: function() {
      this.onDetection = this.onDetection.bind(this)
      this.Trigger     = this.Trigger.bind(this)
      // is ticking a good idea? EDIT: nvm im doing every seconds
      this.stick       = this.stick.bind(this)
      this.onClick     = this.onClick.bind(this)
  
      this.Code = "69420"
      this.CurrentCode = ""
  
      this.Blast    = false
      this.Detected = false
      this.Armed    = true
  
      this.VisibleLight = true
  
      this.Delay = 2 // in seconds, we are not using ms here
      this.CurDelay = undefined
  
      this.Cam = this.el.querySelectorAll("#Camera")
      this.Alarm = this.el.querySelector("#alarm")
      this.Siren = this.el.querySelector("#siren")
  
      this.Cam.forEach(function(element) {
        let hitbox = element.querySelector("#light").querySelector("#hitbox")
        hitbox.addEventListener("detect", (event) => {
          this.onDetection(element)
          // console.log("detect called");
        });
  
        hitbox.addEventListener("clear-detect", (event) => {
          // console.log("cancel called");
        });
      }, this)
  
      this.Buttons = this.el.querySelector("#control").querySelector("#buttons")
  
      let XPos = undefined
      let CurX = undefined
  
      let CurY = undefined
  
      let CurRow  = 0
      let MaxRowX = 3
  
      let Xdiff = 0.2
      let Ydiff = 0.3
      // IT GOES IDC, Y, X
      // 0.
      // ^^ Why is there a 0
      for (x = 1; x < this.Buttons.children.length + 1 ; x++) {
        CurRow += 1
        if(CurRow > MaxRowX) {
          CurY -= Ydiff
          CurX = XPos
          CurRow = 1
        }
  
        let el = this.Buttons.querySelector(`#b${(x).toString()}`)
        let Pos = el.getAttribute("position")
        if (!CurY) CurY = Pos.y; 
        if (!CurX) { CurX = Pos.z; XPos = CurX }
  
        let Type  = el.getAttribute("btn-mode")
        let Mode  = Type.mode
        let Input = Type.input
  
        el.querySelector("#text").setAttribute("text", "value", (Mode == "input" && Input) || Mode.toUpperCase())
        
        el.setAttribute("position", {x: Pos.x, y: CurY, z: CurX})
  
        el.addEventListener("click", this.onClick)
  
        CurX -= Xdiff
      }
      this.stick()
    },
  
  
    onClick: function(element) {
      let el = element.target
      let Type  = el.getAttribute("btn-mode")
  
      let Mode  = Type.mode
      let Input = Type.input
  
      switch(Mode) {
        case "input":
          this.CurrentCode = this.CurrentCode + Input
        break;
  
        case "clr":
          this.CurrentCode = ""
        break;
  
        case "ent":
          if(this.CurrentCode == this.Code) { 
            this.Armed = !this.Armed;
            this.Blast = false;
            this.Detected = false
            this.CurDelay = this.Armed && this.CurDelay || undefined
            this.Alarm.setAttribute("visible", false)
            this.Siren.components.sound.stopSound();
          } else
          this.CurrentCode = ""
        break;
      }
    },
  
    stick: function() {
      let Time = new Date().getTime() / 1000
      if(!this.Armed) this.CurDelay = undefined;
      if(this.CurDelay && Time > this.CurDelay && this.Detected) {
        this.Trigger()
        this.CurDelay = undefined
      }
  
      if(this.Blast) {
        // console.log("WOMP")
        this.VisibleLight =  !this.VisibleLight
        this.Alarm.setAttribute("visible", this.VisibleLight)
      }
  
      setTimeout(this.stick, 300) // Hacky way since I don't want every tick
      // kys im keeping it this way
    }, 
  
    onDetection: function(el) {
      if(this.Detected) { return }
      if(!this.Armed)   { return }
      this.Detected = true
      let Time = new Date().getTime() / 1000
      this.CurDelay = Time + this.Delay
    },
  
    Trigger: function() {
      if(this.Siren) this.Siren.components.sound.playSound();
      this.Blast = true
      console.log("ALARM TIME womp womp")
    }
  })